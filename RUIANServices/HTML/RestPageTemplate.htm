<html>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <title>#PAGETITLE#</title>
    <link rel="shortcut icon" type="image/x-icon" href="#HTMLDATA_URL#favicon.ico" />
	
	<link rel="stylesheet" href="http://code.jquery.com/ui/1.11.0/themes/smoothness/jquery-ui.css">
	<script src="http://code.jquery.com/jquery-1.10.2.js"></script>
	<script src="http://code.jquery.com/ui/1.11.0/jquery-ui.js"></script>

	<style>
		.ui-autocomplete-loading {
			background: white url("http://jqueryui.com/resources/demos/autocomplete/images/ui-anim_basic_16x16.gif") right center no-repeat;
		}

        body {
			font-family: Tahoma;
			color: #575757;
	        font-size: 62.5%;
		}

		p {
			font-size: 100%;
		}

        .enhancedGUI {
			display: none;
        }

        #enhancedGUIButton{
          position: absolute;
          top: 10px;
          right: 40px;
          z-index:10;
        }

		.alert {
			color: #31708f;
			padding: 15px;

			border-width: 1px;
			border-style: solid;
			border-radius: 4px;
			border-color: #bce8f1;
			background-color: rgb(217, 237, 247);
		}

		.warning {
			color: #8a6d3b;
			padding: 15px;

			border-width: 1px;
			border-style: solid;
			border-radius: 4px;
			border-color: #faebcc;
			background-color: rgb(252, 248, 227);
			font-size: 14px;
			font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
		}
		
		input, select {
			border: 1px solid #ccc;
			background: white;
			color: #444;
			box-shadow: 0 0 15px #ddd;
			border-radius: 5px;
		}
		
		input:focus { 
			box-shadow: 0 0 15px #00ffff;
			border: 1px solid #00ffff;
		}
		
		button {
			margin: 10px 15px 10px 15px;
		}

        .resizeAbleDiv {
            width:300px;
            resize:both;
            overflow:auto;
        }

        .resultsTable {
            width: 100%;
        	font-size: small;
        }

		.altColor {
			background-color:#C6D9F1;
		}

		textarea, .warning, .resizeAbleDiv {
			padding: 10px 15px;
			border: 1px solid #ccc;
			background: white;
			color: #444;
			box-shadow: 0 0 15px #ddd;
			border-radius: 5px;		
		}

        table {
        	font-size: small;
        }

        h1, h2 {
            color: #1370AB;
        }

        .resizeAbleDiv {
            visibility : hidden;
            display : none;
        }
	</style>
	
    <script type="text/javascript" charset="utf-8">

var isEnhancedGUI = false; // Je přepnuto do režimu "Programátorské rozhraní"
var DEBUG_MODE = false;
var CALL_TEXTAREA = "";
var CALL_PATH = "";
var USE_DATA_LISTS = false;

function clearInputs(formName)
{
	formElem = $('#' + formName);

	formElem.find("td input").each(
		function(index, elem) {
		    if (elem.type != "button") {
		        elem.value = "";
		    }
		}
	);

    elem = document.getElementById(formName + "_DistrictNumber");
    if (elem) elem.selectedIndex = 0;

    elem = document.getElementById(formName + "_textArea");
    elem.innerText = "";
}

function hideElement(elementName)
{
 document.getElementById(elementName).style.visibility = "hidden";
}

function showElement(elementName)
{
    var elem = document.getElementById(elementName);
    if (elem) { elem.style.visibility = "visible"; }
}

function showOrHideElement(elementName, value)
{
 if (value) {
    showElement(elementName);
 }
 else {
    hideElement(elementName);
 }
}

function enableElement(elementName)
{
    document.getElementById(elementName).disabled = false;
}

function disableElement(elementName)
{
    document.getElementById(elementName).disabled = true;
}

function getSubParamsQuery(formName)
{
    autocompleteSubParamsList = ["Locality", "LocalityPart", "DistrictNumber", "Street", "HouseNumber", "RecordNumber", "OrientationNumber", "OrientationNumberCharacter", "ZIPCode"]

    result = [];
    for (var i = 0; i < autocompleteSubParamsList.length; i++) {
        elem = document.getElementById(formName + "_" + autocompleteSubParamsList[i]);
        value = elem.value;
        if (value != "") {
            result.push(autocompleteSubParamsList[i] + "=" + value);
        }
    }
    return result;
}

function fillDataList(dataListID, dataStr, separator)
{
    if (USE_DATA_LISTS) {
	    dataItems = dataStr.split(separator);
	    innerHTML = ''
	    for (var i = 0; i < dataItems.length; i++) {
		    innerHTML = innerHTML + '<option value="' + dataItems[i] + '">\n';
	    }
	    elem = document.getElementById(dataListID);
	    elem.innerHTML = innerHTML;
	}
}

function requestAndfillDataList(formName, elemId)
{
    if (USE_DATA_LISTS) {
	    var xmlHttp = getxmlHTTP();

        xmlHttp.onreadystatechange = function()
        {
	        if (xmlHttp.readyState == 4) {
		        resultStr = xmlHttp.responseText.replace("\\n","");
		        fillDataList(formName + elemId, resultStr, ",");
	        }
        }

        var subParams = getSubParamsQuery(formName);
        if (subParams != "") {
            url = "#SERVICES_URL_PATH#/rest.py/autocomplete/datalist?" + subParams;
	        xmlHttp.open("GET", url, true);
	        xmlHttp.send(null);
	    }
	    else {
	        fillDataList(formName + elemId, "", ",");
	    }
	}
}

function districtNumberChanged(formName)
{
    if (document.getElementById(formName + "_DistrictNumber").value != "") {
        document.getElementById(formName + "_Locality").value = "Praha"
    }
    setupInputs(formName);
}

function setupInputs(formName)
// Tato funkce nastaví viditelnost a přístupnost jednotlivých vstupních polí
// pro formulář formName podle obsahu jednotlivých polí.
{
    if (!document.getElementById(formName + "_AddressItemsRB") && (formName != "form_4")) { return; }

    findAddress(formName, true);

    var elementValue = function(formName, elementSuffix)
    {
        return document.getElementById(formName + elementSuffix).value;
    }

    //disableElement(formName + "_Locality");

    localityName = document.getElementById(formName + "_Locality").value;
    localityPart = document.getElementById(formName + "_LocalityPart").value;
    street = document.getElementById(formName + "_Street").value;

    //showOrHideElement(formName + "_row_DistrictNumber", localityName.toLowerCase() == "praha");

    if (isEnhancedGUI) {
        showDetails = true;
    }
    else {
        showDetails = (localityName != "" || localityPart != "");
    }

    showDetails = true;
    showOrHideElement(formName + "_row_HouseNumber", showDetails);
    showOrHideElement(formName + "_row_RecordNumber", showDetails);
    showOrHideElement(formName + "_row_OrientationNumber", showDetails);
    showOrHideElement(formName + "_row_OrientationNumberCharacter", showDetails);
    showOrHideElement(formName + "_row_Street", showDetails);
    showOrHideElement(formName + "_FillAddressButton", showDetails);
    showOrHideElement(formName + "_SmartAutocompleteCB", showDetails);

    if (! isEnhancedGUI) {
        var subParamsList = getSubParamsQuery(formName);
        if (document.getElementById(formName + "_SmartAutocompleteCB").checked) {
            subParamsList.push("SmartAutocomplete=true");
        }
        subParams = "&" + subParamsList.join("&");

        if (USE_DATA_LISTS) {
            requestAndfillDataList(formName, "_HouseNumber_DataList");
        }

        $(".RUIAN_DISTRICTNUMBER_INPUT").autocomplete({
          source: [
            {"id":"","label":"Praha 1","value":"1"},
            {"id":"","label":"Praha 2","value":"2"},
            {"id":"","label":"Praha 3","value":"3"},
            {"id":"","label":"Praha 4","value":"4"},
            {"id":"","label":"Praha 5","value":"5"},
            {"id":"","label":"Praha 6","value":"6"},
            {"id":"","label":"Praha 7","value":"7"},
            {"id":"","label":"Praha 8","value":"8"},
            {"id":"","label":"Praha 9","value":"9"},
            {"id":"","label":"Praha 10","value":"10"}
          ],
          minLength: 1,
            select: function( event, ui ) {
		        setInputValueFromMaster(this.id, "_Locality", "Praha");
		        setInputValueFromMaster(this.id, "_ZIPCode", "");
	        }
        });

        $( ".RUIAN_TOWN_INPUT" ).autocomplete({
            source: "#SERVICES_URL_PATH#/rest.py/autocomplete/town?RUIANType=town" + subParams,
            minLength: 1
        });

        $( ".RUIAN_TOWNPART_INPUT" ).autocomplete({
            source: "#SERVICES_URL_PATH#/rest.py/autocomplete/townpart?RUIANType=townpart" + subParams,
            minLength: 1,
            select: function( event, ui ) {
		        setInputValueFromMaster(this.id, "_Locality", ui.item.id);
		        setInputValueFromMaster(this.id, "_ZIPCode", "");
	        }
        });

        $( ".RUIAN_STREET_INPUT" ).autocomplete({
            source: "#SERVICES_URL_PATH#/rest.py/autocomplete/street?RUIANType=street&ResultFormat=AddressParts" + subParams,
            minLength: 1,
            select: function( event, ui ) {
		        addressItems = ui.item.id.split(",");

		        if (addressItems.length == 1) {
			        addressItems = ["", "", "", "", "", "", addressItems[0], "", ""];
		        }

		        setInputValueFromMaster(this.id, "_HouseNumber", addressItems[1]);
		        setInputValueFromMaster(this.id, "_RecordNumber", addressItems[2]);
		        setInputValueFromMaster(this.id, "_OrientationNumber", addressItems[3]);
		        setInputValueFromMaster(this.id, "_OrientationNumberCharacter", addressItems[4]);
		        setInputValueFromMaster(this.id, "_ZIPCode", addressItems[5]);
		        setInputValueFromMaster(this.id, "_Locality", addressItems[6]);
		        setInputValueFromMaster(this.id, "_LocalityPart", addressItems[7]);
		        setInputValueFromMaster(this.id, "_DistrictNumber", addressItems[8]);
            }
        });

        $(".RUIAN_ZIP_INPUT").autocomplete({
            source: "#SERVICES_URL_PATH#/rest.py/autocomplete/zipcode?RUIANType=zip&" + subParams,
            minLength: 0,
            select: function( event, ui ) {

	            idPart = this.id.substring(5, this.id.length); // form_1_ZIPCode

		        id = "form_" + idPart.substring(0, idPart.indexOf("_")) + "_Locality";
		        townElem = document.getElementById(id);
		        townElem.value = ui.item.id;
	        }
        });

    }
}

function getxmlHTTP()
{
	var xmlHttp;
	try {  // Firefox, Opera 8.0+, Safari
		xmlHttp = new XMLHttpRequest();
	} catch (e) {// Internet Explorer
		try { xmlHttp = new ActiveXObject("Msxml2.XMLHTTP"); }
		catch (e) {
				try { xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");	}
				catch (e) {
					alert("Your browser does not support AJAX!");
					return false;
				}
		}
    }
    return xmlHttp;
}

function showMsg(formName, msg)
// Zobrazí zprávu msg v textovém poli formuláře formName.
{
    elem = document.getElementById(formName + "_textArea");
    if (elem) { elem.innerText = msg; }
}

function runOrHookDisplayResult(formName, path)
{
    rb = document.getElementById(formName + "_AddressItemsRB");
    textAreaName = formName + "_textArea";
    if ((rb) && rb.checked &&  document.getElementById(formName).isLoadingAddress == true) {
        CALL_TEXTAREA = textAreaName;
        CALL_PATH = path;
        showMsg(formName, "Čekám na validaci adresy...");
    }
    else displayResult(textAreaName, path);
}

function fillFormInputs(formName, url, doShowMsg)
{
	var xmlHttp = getxmlHTTP();

    xmlHttp.onreadystatechange = function()
    {
	    if (xmlHttp.readyState == 4) {
		    resultStr = xmlHttp.responseText.replace("\\n","");
		    addressItems = resultStr.split(",");
		    if (addressItems.length == 10) {
		        document.getElementById(formName + "_HouseNumber").value = addressItems[0];
		        document.getElementById(formName + "_OrientationNumberCharacter").value = addressItems[2];
		        document.getElementById(formName + "_ZIPCode").value = addressItems[3];
		        document.getElementById(formName + "_Locality").value = addressItems[4];
		        document.getElementById(formName + "_LocalityPart").value = addressItems[5];
		        document.getElementById(formName + "_DistrictNumber").value = addressItems[6];
		        document.getElementById(formName + "_Street").value = addressItems[7];
		        if (addressItems[8] == "č.p.") {
		            document.getElementById(formName + "_OrientationNumber").value = addressItems[1];
		            document.getElementById(formName + "_RecordNumber").value = "";
		        }
		        else {
		            document.getElementById(formName + "_OrientationNumber").value = "";
		            document.getElementById(formName + "_RecordNumber").value = addressItems[1];
		        }
                msg = "Adresa byla doplněna."
		    }
		    else { msg = "Adresa nebyla nalezena."  }
            document.getElementById(formName).isLoadingAddress = false;
		    showMsg(formName, msg);
		    if (CALL_TEXTAREA != "" && CALL_PATH != "") {
                displayResult(CALL_TEXTAREA, CALL_PATH);
                CALL_TEXTAREA = "";
                CALL_PATH = "";
		    }
	    }
    }

    msg = "Hledám odpovídající adresu...";
    if (isEnhancedGUI || DEBUG_MODE) {  msg = "\nOdeslán požadavek\n" + url + "\n" + msg  }
    if (doShowMsg) { showMsg(formName, msg); }
	xmlHttp.open("GET", url, true);
	xmlHttp.send(null);
}

function findAddress(formName, doShowMsg)
{
	formElem = $('#' + formName);

    var addParam = function(formName, value, inputName) {
        inputValue = document.getElementById(formName + "_" + inputName).value;
        if (inputValue != "") {
            value = value + "&" + inputName + "=" + inputValue;
        }
        return value;
    }

    params = "";
    params = addParam(formName, params, "HouseNumber");
    params = addParam(formName, params, "RecordNumber");
    params = addParam(formName, params, "OrientationNumber");
    params = addParam(formName, params, "OrientationNumberCharacter");
    params = addParam(formName, params, "ZIPCode");
    params = addParam(formName, params, "Locality");
    params = addParam(formName, params, "LocalityPart");
    params = addParam(formName, params, "DistrictNumber");
    params = addParam(formName, params, "Street");

    if (params != "") {
        document.getElementById(formName).isLoadingAddress = true;
        url = "#SERVICES_URL_PATH#/rest.py/autocomplete/fill?RUIANType=fill" + params;
        fillFormInputs(formName, url, doShowMsg);
    }
}

function isNumber(event, scope, numDigits, maxValue)
{
 if ((event.isChar == undefined) || (event.isChar)) {
    value = scope.value +  String.fromCharCode(event.charCode);
    numValue = Number(value);

    if (isNaN(value)) {
	    return false;
    }

    if ( (numDigits > 0) && (value.length > numDigits) ) {
	    return false;
    }

    if ( (maxValue > 0) && (numValue > maxValue)) {
	    return false;
    }
 }

 return true;
}

function isENLetter(event, scope)
{
 if ((event.isChar == undefined) || (event.isChar)) {
    value = scope.value +  String.fromCharCode(event.charCode);
    if (scope.value != "") {
       return (value == "ch") || (value == "CH");
    }
    else {
        charStr = String.fromCharCode(event.charCode);
        return "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(charStr) != -1;
    }
 }

 return true;
}

// ****************************************************************************
// Našeptávače
// ****************************************************************************
function setInputValue(id, value)
// Nastaví element <INPUT>, zadaného parametrem id na hodnotu value.
{
	streetElement = document.getElementById(id);
	streetElement.value = value;
}

function extractFormName(elemName)
// Separuje jméno formuláře, na kterém je umístěn element s názvem elemName
// form_1_ZIPCode  --> form_1
{
	idPart = elemName.substring(5, elemName.length); 
	
	return "form_" + idPart.substring(0, idPart.indexOf("_"));
}

function setInputValueFromMaster(masterElemId, suffix, value)
{
	value = value.trim();
	id = extractFormName(masterElemId) + suffix;
	elem = document.getElementById(id);
	elem.value = value;
}

function clearInputList(list)
// Vymaže hodnoty v elementech <INPUT> dle seznamu názvů
{
 for (key in list) {
     setInputValue(list[key], "");
 }
}

function detachAutocompleteListeners()
{
    $(".RUIAN_ID_INPUT").autocomplete({source: []});
    $(".RUIAN_ZIP_INPUT").autocomplete({source: []});
    $(".RUIAN_TOWN_INPUT").autocomplete({source: []});
    $(".RUIAN_TOWNPART_INPUT").autocomplete({source: []});
    $(".RUIAN_STREET_INPUT").autocomplete({source: []});
    $(".RUIAN_TEXTSEARCH_INPUT").autocomplete({source: []});
    $(".RUIAN_DISTRICTNUMBER_INPUT").autocomplete({source: []});
}

function attachAutocompleteListeners()
{
    $(".RUIAN_ID_INPUT").autocomplete({
      source: "#SERVICES_URL_PATH#/rest.py/autocomplete/id?RUIANType=id&",
      minLength: 1,
      select: function( event, ui ) { this.value = ui.item.id; }
    });
	
    $(".RUIAN_ZIP_INPUT").autocomplete({
      source: "#SERVICES_URL_PATH#/rest.py/autocomplete/zipcode?RUIANType=zip&",
      minLength: 3,
      select: function( event, ui ) { 
	  
	    idPart = this.id.substring(5, this.id.length); // form_1_ZIPCode
		
		id = "form_" + idPart.substring(0, idPart.indexOf("_")) + "_Locality";
		townElem = document.getElementById(id);
		townElem.value = ui.item.id; 
	  }
    });	
	
    $( ".RUIAN_TOWN_INPUT" ).autocomplete({
      source: "#SERVICES_URL_PATH#/rest.py/autocomplete/town?RUIANType=town",
      minLength: 1
    });
	
    $( ".RUIAN_TOWNPART_INPUT" ).autocomplete({
      source: "#SERVICES_URL_PATH#/rest.py/autocomplete/townpart?RUIANType=townpart",
      minLength: 1,
      select: function( event, ui ) { 
		setInputValueFromMaster(this.id, "_Locality", ui.item.id);
		setInputValueFromMaster(this.id, "_ZIPCode", "");  
	  }
    });

    $( ".RUIAN_STREET_INPUT" ).autocomplete({
      source: "#SERVICES_URL_PATH#/rest.py/autocomplete/street?RUIANType=street&ResultFormat=AddressParts",
      minLength: 1,
      select: function( event, ui ) {	
		addressItems = ui.item.id.split(",");
		
		if (addressItems.length == 1) {
		    addressItems = ["", "", "", "", "", "", addressItems[0], "", ""];
		}

		setInputValueFromMaster(this.id, "_HouseNumber", addressItems[1]);
		setInputValueFromMaster(this.id, "_RecordNumber", addressItems[2]);
		setInputValueFromMaster(this.id, "_OrientationNumber", addressItems[3]);
		setInputValueFromMaster(this.id, "_OrientationNumberCharacter", addressItems[4]);
		setInputValueFromMaster(this.id, "_ZIPCode", addressItems[5]);
		setInputValueFromMaster(this.id, "_Locality", addressItems[6]);
		setInputValueFromMaster(this.id, "_LocalityPart", addressItems[7]);
		setInputValueFromMaster(this.id, "_DistrictNumber", addressItems[8]);
      }
    });
	
	
    $( ".RUIAN_TEXTSEARCH_INPUT" ).autocomplete({
      source: "#SERVICES_URL_PATH#/rest.py/autocomplete/street?RUIANType=textsearch&ResultFormat=AddressParts",
      minLength: 1,
      select: function( event, ui ) {	
		addressItems = ui.item.id.split(",");

		if (addressItems.length == 2) {
			addressItems = ["", "", "", "", "", addressItems[1], addressItems[0], "", ""];		
		}
			
		setInputValueFromMaster(this.id, "_Street", addressItems[0]);  
		setInputValueFromMaster(this.id, "_HouseNumber", addressItems[1]);  
		setInputValueFromMaster(this.id, "_RecordNumber", addressItems[2]);  
		setInputValueFromMaster(this.id, "_OrientationNumber", addressItems[3]);  
		setInputValueFromMaster(this.id, "_OrientationNumberCharacter", addressItems[4]);  		
		setInputValueFromMaster(this.id, "_ZIPCode", addressItems[5]);  
		setInputValueFromMaster(this.id, "_Locality", addressItems[6]);
		setInputValueFromMaster(this.id, "_LocalityPart", addressItems[7]);
		setInputValueFromMaster(this.id, "_DistrictNumber", addressItems[8]);	
      }
    });

}

$(function() {
    $( "#tabs" ).tabs(#TABSOPTIONS#);
});

$(document).ready(function() {
    $('input:radio[name="radio/Geocode"],input:radio[name="radio/CompileAddress"]').change(function() {
	    tableElem = $(this).parent().find("table");
		
		var visibleRows = [];
        if (this.value == 'vstup') {
			visibleRows = [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];
        }
        else if (this.value == 'id') {
			visibleRows = [0, 1, 2, 13];
        }
        else if (this.value == 'adresa') {
			visibleRows = [0, 1, 3, 13];
        }
		
		tableElem.find('tr').each(function(index, row)
		{
			if (visibleRows.indexOf(index) != -1) {
				$(row).show();
			}
			else {
				$(row).hide();
			}
		});
      });

      $("#enhancedGUIButton").click(function(){
            $(".enhancedGUI").toggle();
			button = document.getElementById("enhancedGUIButton");
			if (button.value == "Programátorské rozhraní") {
			    isEnhancedGUI = true;
				button.value = "Uživatelské rozhraní";
				detachAutocompleteListeners();
			}
			else
			{
			    isEnhancedGUI = false;
				button.value = "Programátorské rozhraní";
				attachAutocompleteListeners();
			}
      });	  
});

// Přiřazení našeptávačů
$(function() {
	attachAutocompleteListeners();
});

function displayResultInTable(textAreaID, resultStr)
{
 classStrings = {
   true: ' class="altColor" ',
   false: ''
 }

 id = '#' + textAreaID.substr(0, textAreaID.length - ("_textarea").length) + "_resultsTable";
 $(id + " tr").remove();

 items = resultStr.split("EndOfRecord");
 var isOdd = false;
 for (var i=0; i < items.length; i++) {
	$(id).append('<tr' + classStrings[isOdd] + '><td>' + items[i] + '</td></tr>');
	isOdd = ! isOdd;
 }
}

function displayResult(id, servicePath)
{
    var url = "<#SERVICES_URL>" + temp
	var xmlHttp;
	try {  // Firefox, Opera 8.0+, Safari
		xmlHttp = new XMLHttpRequest();
	} catch (e) {// Internet Explorer
		try { xmlHttp = new ActiveXObject("Msxml2.XMLHTTP"); }
		catch (e) {
				try { xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");	}
				catch (e) {
					alert("Your browser does not support AJAX!");
					return false;
				}
		}
    }

    xmlHttp.onreadystatechange = function()
    {
	    if (xmlHttp.readyState == 4) {
		    // Get the response from the server and extract the section that comes in the body section of the second
		    // html page avoid inserting the header part of the second page in your first page's element
		    resultStr = xmlHttp.responseText.replace(/<br>/g,"\\n");
		    if (resultStr == "") {
		        if (isEnhancedGUI) {
		            resultStr = "Výsledkem dotazu je prázdný řetězec.";
			    }
		        else
		        {
		            resultStr = "Nebyly nalezeny žádné informace odpovídající zadání.";
		        }
		    }
		    elem.innerText = resultStr;
		    displayResultInTable(id, resultStr);
	    }
    }

    var elem = document.getElementById(id);

    msg = "Odeslal jsem požadavek, čekám na odpověď ze serveru...";
    if (isEnhancedGUI) { msg = "Odeslán požadavek\n" + url + "\n" + msg  }
    elem.innerText = msg;

	xmlHttp.open("GET", url, true);
	xmlHttp.send(null);
}

function stopRKey(evt)
{
    var evt = (evt) ? evt : ((event) ? event : null);
    var node = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null);
    if ((evt.keyCode == 13) && (node.type=="text")) { return false; }
}

document.onkeypress = stopRKey;

var temp;

function onChangeProc(formElem, urlSpanElem, servicePath)
{
    formNameLen = formElem.name.length + 1;

    addressFields = "&Locality&LocalityPart&DistrictNumber&Street&HouseNumber&RecordNumber&OrientationNumber&OrientationNumberCharacter&ZIPCode";

    var skippedInputs = ""
    var elem = document.getElementById(formElem.name + "_AddressRB");
    if (elem && elem.checked) {
       skippedInputs = "AddressPlaceId" + addressFields;
    }
    else {
        elem = document.getElementById(formElem.name + "_AddressItemsRB");
        if (elem && elem.checked) {
            skippedInputs = "AddressPlaceId&SearchText";
        }
        else {
            elem = document.getElementById(formElem.name + "_RuianIdRB");
            if (elem && elem.checked) {
                skippedInputs = "SearchText" + addressFields;
            }
        }
    }

    setupInputs(formElem.name, "", "");
    elements = formElem.elements;
    s = ""
    needToOpenQuery = true
    for (i=0; i < elements.length; i++){
        name = elements[i].name.substr(formNameLen);
	    if (name.charAt(0) == "/") {
		    if (elements[i].value == "") {
			    s = s + "/" + name.substr(1);
		    }
		    else {
			    s = s + "/" + elements[i].value;
		    }
	    }
	    else {
		    if (needToOpenQuery) {
			    delimeter = "";
			    s = s + "?"
			    needToOpenQuery = false;
		    }
		    else {
			    delimeter = "&";
		    }
		    if (name != "" && name != "de") {
                isOK = skippedInputs == "";
                if (! isOK) {
                   isOK = skippedInputs.indexOf(name) == -1
                }
		        if (isOK && elements[i].value != "") {
			        s = s + delimeter + name + "=" + encodeURI(elements[i].value);
			    }
		    }
	    }
    }
    urlSpanElem.innerHTML = "<#SERVICES_URL>"+ servicePath + s; //+ "\\n";
    temp = servicePath + s;
}
    </script>

      <style>
  label {
    display: inline-block;
    width: 5em;
  }
  </style>

    <body>
    <h1>#PAGETITLE#</h1>
    <input type="button" value="Programátorské rozhraní" id="enhancedGUIButton">
	<div class="enhancedGUI">
		<div class="ui-widget">
            <div class="ui-state-error ui-corner-all" style="padding: 0 .7em;">
		    <p>
			<span class="ui-icon ui-icon-alert" style="float: left; margin-right: .3em;"></span>
			<strong>Toto rozhraní slouží pro programátory k seznámení s funkcionalitou serveru.
				Hodnoty vstupních polí nejsou nijak kontrolovány a je tak například možné simulovat zasílání chybných či neúplných požadavků na server.</strong>
		    </div>
        </div>
        <br>
	</div>
    #CONSOLELINES#
<div id="tabs">
  <ul>
    <li><a href="#tabs-0">Popis služeb</a></li>
    <#TABCAPTIONS#/>
  </ul>
    <div id="tabs-0">
    <p>
    Tento portál umožňuje využívat kopii databáze Registru územní identifikace, adres a nemovitostí (RÚIAN) pomocí webových služeb.
    <br>
    #ISSUELINES#
    <br>
    Jednotlivé služby je možné využívat pomocí standardů Representational State Transfer (REST) v souladu s <a href="http://bivoj.vugtk.cz/euradin/Doc/WP03/MetodikaWeboveSluzby.docx">
    cerifikovanou metodikou</a>.
    Každá záložka obsahuje popis jedné služby včetně parametrů.
    </p>
    <img src="#HTMLDATA_URL#WebServices.png" >
    <br>
    <a class = 'enhancedGUI' href='#SERVICES_URL_PATH#/rest.py/testing/TestResults.html'>Výsledky testů</a>
    </div>
  <#TABDIVS#/>
</div>

<div style="width:80%">
<br>
<br>
<br>
<p>
<center>
<table>
    <tr>
        <td><img src="#HTMLDATA_URL#tacr_eng.png" height="55"></td>
        <td>
Webové služby RÚIAN byly vytvořeny v rámci projektu
TB01CUZK004: Výzkum uplatnění závěrů projektu eContentplus s názvem EURADIN v podmínkách RUIAN (2012-2014).<br>
            RÚIAN Toolbox verze #VERSIONNUMBER#, <a href="#SERVICES_URL_PATH#/rest.py/dbdetails">data RÚIAN</a> aktuální k #RUIANVERSIONDATE#.
        </td>
    </tr>
</table>
</center>
</p>
</div>

    </body>
</html>