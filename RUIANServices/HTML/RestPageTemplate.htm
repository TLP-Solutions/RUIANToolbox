<html>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <title>#PAGETITLE#</title>
    <link rel="shortcut icon" type="image/x-icon" href="#HTMLDATA_URL#favicon.ico" />
	
	<link rel="stylesheet" href="http://code.jquery.com/ui/1.11.0/themes/smoothness/jquery-ui.css">
	<script src="http://code.jquery.com/jquery-1.10.2.js"></script>
	<script src="http://code.jquery.com/ui/1.11.0/jquery-ui.js"></script>
	<link rel="stylesheet" href="http://jqueryui.com/resources/demos/style.css">
	<style>
		.ui-autocomplete-loading {
			background: white url("http://jqueryui.com/resources/demos/autocomplete/images/ui-anim_basic_16x16.gif") right center no-repeat;
		}
		p {
			font-size: 100%;
		}
        body { 
			font-family: Tahoma 
		}

        .enhancedGUI {
			display: none;
        }

        #enhancedGUIButton{
          position: absolute;
          top: 10px;
          right: 40px;
          z-index:10;
        }

		.alert {
			color: #31708f;
			padding: 15px;

			border-width: 1px;
			border-style: solid;
			border-radius: 4px;
			border-color: #bce8f1;
			background-color: rgb(217, 237, 247);
		}

		.warning {
			color: #8a6d3b;
			padding: 15px;

			border-width: 1px;
			border-style: solid;
			border-radius: 4px;
			border-color: #faebcc;
			background-color: rgb(252, 248, 227);
			font-size: 14px;
			font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
		}
		
		input, select {
			border: 1px solid #ccc;
			background: white;
			color: #444;
			box-shadow: 0 0 15px #ddd;
			border-radius: 5px;
		}
		
		input:focus { 
			box-shadow: 0 0 15px #00ffff;
			border: 1px solid #00ffff;
		}
		
		button {
			margin: 10px 15px 10px 15px;
		}
		
		textarea, .warning {
			padding: 10px 15px;
			border: 1px solid #ccc;
			background: white;
			color: #444;
			box-shadow: 0 0 15px #ddd;
			border-radius: 5px;		
		}
	</style>
	
    <script>

var isEnhancedGUI = false; // Je přepnuto do režimu "Programátorské rozhraní"

function clearInputs(formName)
{
	formElem = $('#' + formName);

	formElem.find("td input").each(
		function(index, elem) { elem.value = ""; }
	);

    elem = document.getElementById(formName + "_textArea");
    elem.innerText = "";
}

function isNumber(event, scope, numDigits, maxValue)
{
 if ((event.isChar == undefined) || (event.isChar)) {
    value = scope.value +  String.fromCharCode(event.charCode);
    numValue = Number(value);

    if (isNaN(value)) {
	    return false;
    }

    if ( (numDigits > 0) && (value.length > numDigits) ) {
	    return false;
    }

    if ( (maxValue > 0) && (numValue > maxValue)) {
	    return false;
    }
 }

 return true;
}

function isENLetter(event, scope)
{
 if ((event.isChar == undefined) || (event.isChar)) {
    value = scope.value +  String.fromCharCode(event.charCode);
    if (scope.value != "") {
       return (value == "ch") || (value == "CH");
    }
    else {
        charStr = String.fromCharCode(event.charCode);
        return "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(charStr) != -1;
    }
 }

 return true;
}

// ****************************************************************************
// Našeptávače
// ****************************************************************************
function setInputValue(id, value)
// Nastaví element <INPUT>, zadaného parametrem id na hodnotu value.
{
	streetElement = document.getElementById(id);
	streetElement.value = value;
}

function extractFormName(elemName)
// Separuje jméno formuláře, na kterém je umístěn element s názvem elemName
// form_1_ZIPCode  --> form_1
{
	idPart = elemName.substring(5, elemName.length); 
	
	return "form_" + idPart.substring(0, idPart.indexOf("_"));
}

function setInputValueFromMaster(masterElemId, suffix, value)
{
	value = value.trim();
	id = extractFormName(masterElemId) + suffix;
	elem = document.getElementById(id);
	elem.value = value;
}

function clearInputList(list)
// Vymaže hodnoty v elementech <INPUT> dle seznamu názvů
{
 for (key in list) {
     setInputValue(list[key], "");
 }
}

function detachAutocompleteListeners()
{
    $(".RUIAN_ID_INPUT").autocomplete({source: []});
    $(".RUIAN_ZIP_INPUT").autocomplete({source: []});
    $(".RUIAN_TOWN_INPUT").autocomplete({source: []});
    $(".RUIAN_TOWNPART_INPUT").autocomplete({source: []});
    $(".RUIAN_STREET_INPUT").autocomplete({source: []});
    $(".RUIAN_TEXTSEARCH_INPUT").autocomplete({source: []});
}

function attachAutocompleteListeners()
{
    $(".RUIAN_ID_INPUT").autocomplete({
      source: "#SERVICES_URL_PATH#/jqueryautocomplete.py/id?RUIANType=id&",
      minLength: 1,
      select: function( event, ui ) { this.value = ui.item.id; }
    });
	
    $(".RUIAN_ZIP_INPUT").autocomplete({
      source: "#SERVICES_URL_PATH#/jqueryautocomplete.py/zipcode?RUIANType=zip&",
      minLength: 1,
      select: function( event, ui ) { 
	  
	    idPart = this.id.substring(5, this.id.length); // form_1_ZIPCode
		
		id = "form_" + idPart.substring(0, idPart.indexOf("_")) + "_Locality";
		townElem = document.getElementById(id);
		townElem.value = ui.item.id; 
	  }
    });	
	
    $( ".RUIAN_TOWN_INPUT" ).autocomplete({
      source: "#SERVICES_URL_PATH#/jqueryautocomplete.py/town?RUIANType=town",
      minLength: 1,
      select: function( event, ui ) { 
		setInputValueFromMaster(this.id, "_LocalityPart", ui.item.id);
	  }
    });
	
    $( ".RUIAN_TOWNPART_INPUT" ).autocomplete({
      source: "#SERVICES_URL_PATH#/jqueryautocomplete.py/townpart?RUIANType=townpart",
      minLength: 1,
      select: function( event, ui ) { 
		setInputValueFromMaster(this.id, "_Locality", ui.item.id);
		setInputValueFromMaster(this.id, "_ZIPCode", "");  
	  }
    });

    $( ".RUIAN_STREET_INPUT" ).autocomplete({
      source: "#SERVICES_URL_PATH#/jqueryautocomplete.py/street?RUIANType=street&ResultFormat=AddressParts",
      minLength: 1,
      select: function( event, ui ) {	
		addressItems = ui.item.id.split(",");
		
		if (addressItems.length == 1) {
			addressItems = ["", "", "", "", "", "", addressItems[0], "", ""];
		}
			
		setInputValueFromMaster(this.id, "_HouseNumber", addressItems[1]);  
		setInputValueFromMaster(this.id, "_RecordNumber", addressItems[2]);  
		setInputValueFromMaster(this.id, "_OrientationNumber", addressItems[3]);  
		setInputValueFromMaster(this.id, "_OrientationNumberCharacter", addressItems[4]);  		
		setInputValueFromMaster(this.id, "_ZIPCode", addressItems[5]);
		setInputValueFromMaster(this.id, "_Locality", addressItems[5]);
		setInputValueFromMaster(this.id, "_LocalityPart", addressItems[6]);
		setInputValueFromMaster(this.id, "_DistrictNumber", addressItems[7]);
      }
    });
	
	
    $( ".RUIAN_TEXTSEARCH_INPUT" ).autocomplete({
      source: "#SERVICES_URL_PATH#/jqueryautocomplete.py/street?RUIANType=textsearch&ResultFormat=AddressParts",
      minLength: 1,
      select: function( event, ui ) {	
		addressItems = ui.item.id.split(",");

		if (addressItems.length == 2) {
			addressItems = ["", "", "", "", "", addressItems[1], addressItems[0], "", ""];		
		}
			
		setInputValueFromMaster(this.id, "_Street", addressItems[0]);  
		setInputValueFromMaster(this.id, "_HouseNumber", addressItems[1]);  
		setInputValueFromMaster(this.id, "_RecordNumber", addressItems[2]);  
		setInputValueFromMaster(this.id, "_OrientationNumber", addressItems[3]);  
		setInputValueFromMaster(this.id, "_OrientationNumberCharacter", addressItems[4]);  		
		setInputValueFromMaster(this.id, "_ZIPCode", addressItems[5]);  
		setInputValueFromMaster(this.id, "_Locality", addressItems[6]);
		setInputValueFromMaster(this.id, "_LocalityPart", addressItems[7]);
		setInputValueFromMaster(this.id, "_DistrictNumber", addressItems[8]);	
      }
    });

}

$(function() {
    $( "#tabs" ).tabs(#TABSOPTIONS#);
});

$(document).ready(function() {
    $('input:radio[name="radio/Geocode"],input:radio[name="radio/CompileAddress"]').change(function() {
	    tableElem = $(this).parent().find("table");
		
		var visibleRows = [];
        if (this.value == 'vstup') {
			visibleRows = [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
        }
        else if (this.value == 'id') {
			visibleRows = [0, 1, 2, 13];
        }
        else if (this.value == 'adresa') {
			visibleRows = [0, 1, 3, 13];
        }
		
		tableElem.find('tr').each(function(index, row)
		{
			if (visibleRows.indexOf(index) != -1) {
				$(row).show();
			}
			else {
				$(row).hide();
			}
		});
      });
      $("#enhancedGUIButton").click(function(){
            $(".enhancedGUI").toggle();
			button = document.getElementById("enhancedGUIButton");
			if (button.value == "Programátorské rozhraní") {
			    isEnhancedGUI = true;
				button.value = "Uživatelské rozhraní";
				detachAutocompleteListeners();
			}
			else
			{
			    isEnhancedGUI = false;
				button.value = "Programátorské rozhraní";
				attachAutocompleteListeners();
			}
      });	  
});

// Přiřazení našeptávačů
$(function() {
	attachAutocompleteListeners();
});
  </script>

    <script type="text/javascript" charset="utf-8">

	function displayResult(id, servicePath){
        var url = "<#SERVICES_URL>" + temp
		var xmlHttp;
		try {// Firefox, Opera 8.0+, Safari
			xmlHttp = new XMLHttpRequest();
		} catch (e) {// Internet Explorer
			try {
				xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
			} catch (e) {
				try {
					xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
				} catch (e) {
					alert("Your browser does not support AJAX!");
					return false;
				}
			}
		}

		xmlHttp.onreadystatechange = function(){
			if (xmlHttp.readyState == 4) {
				// Get the response from the server and extract the section that comes in the body section of the second
				// html page avoid inserting the header part of the second page in your first page's element
				resultStr = xmlHttp.responseText.replace(/<br>/g,"\\n");
				if (resultStr == "") {
				    if (isEnhancedGUI) {
				        resultStr = "Výsledkem dotazu je prázdný řetězec.";
				    }
				    else
				    {
				        resultStr = "Nebyly nalezeny žádné informace odpovídající zadání.";
				    }
				}
				elem.innerText = resultStr;
			}
		}

		var elem = document.getElementById(id);
		if (!elem) {
			alert('The element with the passed ID'+ id +' does not exists on your page');
			return;
		}

        msg = "Odeslal jsem požadavek, čekám na odpověď ze serveru...";
        if (isEnhancedGUI) {
            msg = "Odeslán požadavek\n" + url + "\n" + msg
        }
        elem.innerText = msg;
		xmlHttp.open("GET", url, true);
		xmlHttp.send(null);


	}

	function stopRKey(evt) {
        var evt = (evt) ? evt : ((event) ? event : null);
        var node = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null);
        if ((evt.keyCode == 13) && (node.type=="text"))  {return false;}
    }

document.onkeypress = stopRKey;

    </script>


    <script type="text/javascript" charset="utf-8">
var temp;
function onChangeProc(formElem, urlSpanElem, servicePath)
{

 formNameLen = formElem.name.length + 1;
 console = document.getElementById("console");
 elements = formElem.elements;
 s = ""
 needToOpenQuery = true
 for (i=0; i < elements.length; i++){
    name = elements[i].name.substr(formNameLen);
	if (name.charAt(0) == "/") {
		if (elements[i].value == "") {
			s = s + "/" + name.substr(1);
		}
		else {
			s = s + "/" + elements[i].value;
		}
	}
	else {
		if (needToOpenQuery) {
			delimeter = "";
			s = s + "?"
			needToOpenQuery = false;
		}
		else {
			delimeter = "&";
		}
		if (name != "" && name != "de") {
		    if (elements[i].value!="") {
			    s = s + delimeter + name + "=" + encodeURI(elements[i].value);
			}
		}
	}

 }
 urlSpanElem.innerHTML = "<#SERVICES_URL>"+ servicePath + s + "\\n";
 temp = servicePath + s;
}
    </script>

      <style>
  label {
    display: inline-block;
    width: 5em;
  }
  </style>

    <body>
    <h1>#PAGETITLE#</h1>
    <input type="button" value="Programátorské rozhraní" id="enhancedGUIButton">
	<div class="enhancedGUI">
		<div class="ui-widget">
            <div class="ui-state-error ui-corner-all" style="padding: 0 .7em;">
		    <p>
			<span class="ui-icon ui-icon-alert" style="float: left; margin-right: .3em;"></span>
			<strong>Toto rozhraní umožňuje slouží pro programátory k seznámení s funkcionalitou serveru.
				Hodnoty vstupních polí nejsou nijak kontrolovány a je tak například možné simulovat zasílání chybných či neúplných požadavků na server.</strong>
		    </div>
        </div>
	</div>
    #CONSOLELINES#
<div id="tabs">
  <ul>
    <li><a href="#tabs-0">Popis služeb</a></li>
    <#TABCAPTIONS#/>
  </ul>
    <div id="tabs-0">
    <p>
    Tento portál umožňuje využívat kopii databáze Registru územní identifikace, adres a nemovitostí (RÚIAN) pomocí webových služeb.
    <br>
    #ISSUELINES#
    <br>
    Jednotlivé služby je možné využívat pomocí standardů Representational State Transfer (REST) v souladu s <a href="http://bivoj.vugtk.cz/euradin/Doc/WP03/MetodikaWeboveSluzby.docx">
    cerifikovanou metodikou</a>.
    Každá záložka obsahuje popis jedné služby včetně parametrů.
    </p>
    <img src="#HTMLDATA_URL#WebServices.png" >
    </div>
  <#TABDIVS#/>
</div>

<div style="width:80%">
<br>
<br>
<br>
<p>
<center>
<table>
    <tr>
        <td><img src="#HTMLDATA_URL#tacr_eng.png" height="55"></td>
        <td>
Webové služby RÚIAN byly vytvořeny v rámci projektu
TB01CUZK004: Výzkum uplatnění závěrů projektu eContentplus s názvem EURADIN v podmínkách RUIAN    (2012-2014).<br>
            RÚIAN Toolbox verze pro ladění požadavku č.#VERSIONNUMBER#
        </td>
    </tr>
</table>
</center>
</p>
</div>

    </body>
</html>